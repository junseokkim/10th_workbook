name: CI/CD Pipeline

on:
  push:
    branches: [ develop, ci/ci-cd ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        # 프로젝트의 코드를 가져옵니다

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
        # Java 17을 설치하여 빌드할 준비를 합니다

      - name: Build project with Gradle
        run: ./gradlew build -x test
        # Gradle을 사용해 프로젝트를 빌드합니다
        # 테스트는 제외 (-x test)

      - name: Copy application.yml to EC2
        env:
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
        run: |
          echo "$APPLICATION_YML" > application.yml
          scp -i private_key -o StrictHostKeyChecking=no application.yml ec2-user@${{ secrets.EC2_HOST }}:~/application.yml
          ssh -i private_key -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} '
            sudo mv ~/application.yml /opt/myapp/application.yml
          '
        # GitHub Secrets에서 application.yml을 가져와 EC2로 전송하고 이동합니다

      - name: Deploy JAR to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ec2-user
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -i private_key -o StrictHostKeyChecking=no build/libs/*.jar ${USER}@${HOST}:~/app.jar
          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
            sudo systemctl stop myapp || true
            sudo mv ~/app.jar /opt/myapp/app.jar
            sudo systemctl start myapp
          '
        # 빌드된 JAR 파일을 EC2에 배포하고 애플리케이션을 재시작합니다
